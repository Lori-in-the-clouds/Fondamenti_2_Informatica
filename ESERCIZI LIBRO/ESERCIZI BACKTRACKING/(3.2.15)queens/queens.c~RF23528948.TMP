#include "queens.h"
#include <stdlib.h>
#include <stdio.h>
void PlaceQueensRec(int n_queens, const struct Matrix* tab, int i,int cont) {
	if (i == (tab->lato * tab->lato)) {
		for (int j = 0; j < i; j++) {
			if (tab->data[j] == 1) {
				//controlliamo la riga 
				int rows = j / tab->lato;
				for (int k = 0; k < tab->lato; k++) {
					if (tab->data[rows * tab->lato + k] == 1 && (rows * tab->lato + k) != j) return;
				}
				//controlliamo la colonna
				int m = j;
				while (m > tab->lato) m-=tab->lato;
				while (m < (tab->lato*tab->lato)) {
					if (tab->data[m] == 1 && (m) != j) return;
					m += tab->lato;
				}
				//controlliamo la diagonole sinistra destra
				m = j;
				if (j == (tab->lato * tab->lato) - 1) continue;
				while (m > tab->lato) {
					m -= tab->lato;
					m--;
				}
				while (m < (tab->lato * tab->lato)) {
					if (tab->data[m] == 1 && (m) != j) return;
					m += tab->lato + 1;
				}
				//controlliamo diagonale destra sinistra
				m = j;
				if (j == 0) continue;
				while (m >= tab->lato) {
					m -= tab->lato+1;
				}
				while (m <= j) {
					if (tab->data[m] == 1 && (m) != j) return;
					m += tab->lato;
					m--;
				}
			}
		}
		if (cont != 4) return;
		//stampiamo
		for (int j = 0; j < i; j++) {
				printf("[%d]", tab->data[j]);
				if ((j + 1) % tab->lato == 0) printf("\n");
		}
		printf("\n");
		return;
	}
	if (cont < 4) {
		tab->data[i] = 1;
		PlaceQueensRec(n_queens, tab, i + 1, cont + 1);
	}
		tab->data[i] = 0;
		PlaceQueensRec(n_queens, tab, i + 1,cont);
	}

int PlaceQueens(int chessboard_size, int n_queens) {
	struct Matrix p;
	p.lato = chessboard_size;
	p.data = calloc(p.lato, sizeof(int));
	PlaceQueensRec(n_queens, &p, 0,0);
}